{"version":3,"file":"static/webpack/static/development/pages/form.js.493077ae9572f2857c6d.hot-update.js","sources":["webpack:///./components/forms/index.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ContactForm from './contact';\nimport OtherForm from './other';\nimport FormProvider, { FormContext } from './FormProvider';\n\nconst FormWrapper = () => {\n  // state for each attribute\n  const [currentPage, setCurrentPage] = useState(0);\n  const [valid, setValid] = useState(false);\n\n  // all form components\n  const forms = [\n    <ContactForm />,\n    <OtherForm />\n  ];\n\n  // handle paging between forms\n  const hasNextPage = currentPage < forms.length - 1;\n  const hasLastPage = currentPage > 0;\n  const nextPage = () => {\n    if (hasNextPage) {\n      setCurrentPage(currentPage + 1);\n      \n    }\n  }\n  const lastPage = () => {\n    if (hasLastPage) {\n      setCurrentPage(currentPage - 1)\n    }\n  }\n\n  // render 1 form at a time\n  return (\n    <FormProvider>\n      <FormContext.Consumer>\n        {/* attach dispatch and state to the dynamic 'current page' form via React Cloning */}\n        {({dispatch, state}) => {\n          console.log('validity check on form', state);\n          return (\n            <div>\n              {React.cloneElement(forms[currentPage], { dispatch, state })}\n              <button disabled={!hasLastPage} onClick={lastPage}>last</button>\n              <button disabled={!hasNextPage || !state.validForms[currentPage]} onClick={nextPage}>next</button>\n            </div>\n            );\n          }\n        }\n      </FormContext.Consumer>\n    </FormProvider>\n  );\n}\n\nexport default FormWrapper;\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAKA;AACA;AACA;;;;A","sourceRoot":""}