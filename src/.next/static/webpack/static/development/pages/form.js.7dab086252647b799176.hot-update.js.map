{"version":3,"file":"static/webpack/static/development/pages/form.js.7dab086252647b799176.hot-update.js","sources":["webpack:///./components/forms/contact/index.js","webpack:///./components/forms/index.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { FormContext } from '../FormProvider';\n\nconst ContactForm = (props) =>  {\n\n  console.log('propz', props);\n\n  const { onSubmit } = props;\n\n  const [fullName, setFullName] = useState('');\n  const [phone, setPhone] = useState('');\n  const [email, setEmail] = useState('');\n\n  return (\n    <FormContext.Consumer>\n      <form onSubmit={(e) => onSubmit(e, fullName, phone, email)}>\n        <input id=\"fullName\" type='text' placeholder='Full Name' onChange={e => setFullName(e.target.value)}></input>\n        <input id=\"phone\" type='phone' placeholder='8888888888' onChange={e => setPhone(e.target.value)}></input>\n        <input id=\"email\" type='email' placeholder='placeholder@email.com' onChange={e => setEmail(e.target.value)}></input>\n        <input type='submit' name='submit' />\n      </form>\n    </FormContext.Consumer>\n  );\n}\n\nexport default ContactForm;\n","import React, { useState } from 'react';\nimport ContactForm from './contact';\nimport FormProvider, { FormContext } from './FormProvider';\n\nconst FormWrapper = () => {\n  // state for each attribute\n  const [currentPage, setCurrentPage] = useState(0);\n\n  // all form components\n  const forms = [\n    <ContactForm />,\n  ]\n\n  // handle paging between forms\n  const hasNextPage = currentPage < forms.length - 1;\n  const hasLastPage = currentPage > 0;\n  const nextPage = () => {\n    if (hasNextPage) {\n      setCurrentPage(currentPage + 1);\n      \n    }\n  }\n  const lastPage = () => {\n    if (hasLastPage) {\n      setCurrentPage(currentPage - 1)\n    }\n  }\n\n\n  // render 1 form at a time\n  return (\n    <FormProvider>\n      <FormContext.Consumer>\n        {forms[currentPage]}\n        <button disabled={!hasLastPage} onClick={lastPage}>last</button>\n        <button disabled={!hasNextPage} onClick={nextPage}>next</button>\n      </FormContext.Consumer>\n    </FormProvider>\n  );\n}\n\nexport default FormWrapper;\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;A","sourceRoot":""}