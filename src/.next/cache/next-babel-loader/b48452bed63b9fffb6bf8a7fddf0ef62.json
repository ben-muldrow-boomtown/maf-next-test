{"ast":null,"code":"var _jsxFileName = \"/Users/benjaminmuldrow/Code/maf-next-test/src/components/forms/contact/index.js\";\nvar __jsx = React.createElement;\nimport React, { useRef } from 'react';\n\nconst ContactForm = props => {\n  const {\n    dispatch,\n    pageNumber\n  } = props;\n  const fullNameRef = useRef(null);\n  const phoneRef = useRef(null);\n  const emailRef = useRef(null);\n\n  const updateField = (dispatch, ref) => {\n    dispatch({\n      type: ref.current.id,\n      payload: {\n        key: ref.current.id,\n        value: ref.current.value\n      }\n    });\n  }; // simple validation\n\n\n  const updateValidation = () => {\n    if (fullNameRef.current.value && phoneRef.current.value && emailRef.current.value) {\n      dispatch({\n        type: 'validation',\n        payload: {\n          pageNumber,\n          valid: true\n        }\n      });\n    } else {\n      dispatch({\n        type: 'validation',\n        payload: {\n          pageNumber,\n          valid: false\n        }\n      });\n    }\n  };\n\n  const onChange = e => {\n    updateField(dispatch, e);\n    updateValidation();\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: \"fullName\",\n    type: \"text\",\n    placeholder: \"Full Name\",\n    onChange: () => onChange(dispatch, fullNameRef),\n    ref: fullNameRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), __jsx(\"input\", {\n    id: \"phone\",\n    type: \"phone\",\n    placeholder: \"8888888888\",\n    onChange: () => onChange(dispatch, phoneRef),\n    ref: phoneRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), __jsx(\"input\", {\n    id: \"email\",\n    type: \"email\",\n    placeholder: \"placeholder@email.com\",\n    onChange: () => onChange(dispatch, emailRef),\n    ref: emailRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }));\n};\n\nexport default ContactForm;","map":{"version":3,"sources":["/Users/benjaminmuldrow/Code/maf-next-test/src/components/forms/contact/index.js"],"names":["React","useRef","ContactForm","props","dispatch","pageNumber","fullNameRef","phoneRef","emailRef","updateField","ref","type","current","id","payload","key","value","updateValidation","valid","onChange","e"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAY;AAC9B,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA2BF,KAAjC;AACA,QAAMG,WAAW,GAAGL,MAAM,CAAC,IAAD,CAA1B;AACA,QAAMM,QAAQ,GAAGN,MAAM,CAAC,IAAD,CAAvB;AACA,QAAMO,QAAQ,GAAGP,MAAM,CAAC,IAAD,CAAvB;;AAEA,QAAMQ,WAAW,GAAG,CAACL,QAAD,EAAWM,GAAX,KAAmB;AACrCN,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAED,GAAG,CAACE,OAAJ,CAAYC,EADX;AAEPC,MAAAA,OAAO,EAAE;AACPC,QAAAA,GAAG,EAAEL,GAAG,CAACE,OAAJ,CAAYC,EADV;AAEPG,QAAAA,KAAK,EAAEN,GAAG,CAACE,OAAJ,CAAYI;AAFZ;AAFF,KAAD,CAAR;AAOD,GARD,CAN8B,CAgB9B;;;AACA,QAAMC,gBAAgB,GAAG,MAAM;AAC7B,QAAIX,WAAW,CAACM,OAAZ,CAAoBI,KAApB,IAA6BT,QAAQ,CAACK,OAAT,CAAiBI,KAA9C,IAAuDR,QAAQ,CAACI,OAAT,CAAiBI,KAA5E,EAAmF;AACjFZ,MAAAA,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAE,YADC;AAEPG,QAAAA,OAAO,EAAE;AACPT,UAAAA,UADO;AAEPa,UAAAA,KAAK,EAAE;AAFA;AAFF,OAAD,CAAR;AAOD,KARD,MAQO;AACLd,MAAAA,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAE,YADC;AAEPG,QAAAA,OAAO,EAAE;AACPT,UAAAA,UADO;AAEPa,UAAAA,KAAK,EAAE;AAFA;AAFF,OAAD,CAAR;AAOD;AACF,GAlBD;;AAoBA,QAAMC,QAAQ,GAAIC,CAAD,IAAO;AACtBX,IAAAA,WAAW,CAACL,QAAD,EAAWgB,CAAX,CAAX;AACAH,IAAAA,gBAAgB;AACjB,GAHD;;AAKA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,EAAE,EAAC,UADL;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,WAAW,EAAC,WAHd;AAIE,IAAA,QAAQ,EAAE,MAAME,QAAQ,CAACf,QAAD,EAAWE,WAAX,CAJ1B;AAKE,IAAA,GAAG,EAAEA,WALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAQE;AACE,IAAA,EAAE,EAAC,OADL;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,WAAW,EAAC,YAHd;AAIE,IAAA,QAAQ,EAAE,MAAMa,QAAQ,CAACf,QAAD,EAAWG,QAAX,CAJ1B;AAKE,IAAA,GAAG,EAAEA,QALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EAeE;AACE,IAAA,EAAE,EAAC,OADL;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,WAAW,EAAC,uBAHd;AAIE,IAAA,QAAQ,EAAE,MAAMY,QAAQ,CAACf,QAAD,EAAWI,QAAX,CAJ1B;AAKE,IAAA,GAAG,EAAEA,QALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,CADF;AAyBD,CAnED;;AAqEA,eAAeN,WAAf","sourcesContent":["import React, { useRef } from 'react';\n\nconst ContactForm = (props) =>  {\n  const { dispatch, pageNumber } = props;\n  const fullNameRef = useRef(null);\n  const phoneRef = useRef(null);\n  const emailRef = useRef(null);\n\n  const updateField = (dispatch, ref) => {\n    dispatch({\n      type: ref.current.id,\n      payload: {\n        key: ref.current.id,\n        value: ref.current.value\n      }\n    });\n  }\n\n  // simple validation\n  const updateValidation = () => {\n    if (fullNameRef.current.value && phoneRef.current.value && emailRef.current.value) {\n      dispatch({\n        type: 'validation',\n        payload: {\n          pageNumber,\n          valid: true\n        }\n      })\n    } else {\n      dispatch({\n        type: 'validation',\n        payload: {\n          pageNumber,\n          valid: false\n        }\n      })\n    }\n  }\n\n  const onChange = (e) => {\n    updateField(dispatch, e);\n    updateValidation();\n  }\n\n  return (\n    <div>\n      <input\n        id=\"fullName\"\n        type='text'\n        placeholder='Full Name'\n        onChange={() => onChange(dispatch, fullNameRef)}\n        ref={fullNameRef}\n      />\n      <input\n        id=\"phone\"\n        type='phone'\n        placeholder='8888888888'\n        onChange={() => onChange(dispatch, phoneRef)}\n        ref={phoneRef}\n      />\n      <input\n        id=\"email\"\n        type='email'\n        placeholder='placeholder@email.com'\n        onChange={() => onChange(dispatch, emailRef)}\n        ref={emailRef}\n      />\n    </div>\n  );\n}\n\nexport default ContactForm;\n"]},"metadata":{},"sourceType":"module"}