{"ast":null,"code":"var _jsxFileName = \"/Users/benjaminmuldrow/Code/maf-next-test/src/components/forms/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport ContactForm from './contact';\nimport FormProvider, { FormContext } from './FormProvider';\n\nconst FormWrapper = () => {\n  // state for each attribute\n  const {\n    0: currentPage,\n    1: setCurrentPage\n  } = useState(0); // all form components\n\n  const forms = [__jsx(ContactForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  })];\n  const CurrentForm = forms[currentPage]; // handle paging between forms\n\n  const hasNextPage = currentPage < forms.length - 1;\n  const hasLastPage = currentPage > 0;\n\n  const nextPage = () => {\n    if (hasNextPage) {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n\n  const lastPage = () => {\n    if (hasLastPage) {\n      setCurrentPage(currentPage - 1);\n    }\n  }; // render 1 form at a time\n\n\n  return __jsx(FormProvider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, __jsx(FormContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, ({\n    dispatch,\n    state\n  }) => __jsx(CurrentForm, {\n    dispatch: dispatch,\n    state: state,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  })), __jsx(\"button\", {\n    disabled: !hasLastPage,\n    onClick: lastPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"last\"), __jsx(\"button\", {\n    disabled: !hasNextPage,\n    onClick: nextPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"next\"));\n};\n\nexport default FormWrapper;","map":{"version":3,"sources":["/Users/benjaminmuldrow/Code/maf-next-test/src/components/forms/index.js"],"names":["React","useState","ContactForm","FormProvider","FormContext","FormWrapper","currentPage","setCurrentPage","forms","CurrentForm","hasNextPage","length","hasLastPage","nextPage","lastPage","dispatch","state"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,WAAxB;AACA,OAAOC,YAAP,IAAuBC,WAAvB,QAA0C,gBAA1C;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACxB;AACA,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCN,QAAQ,CAAC,CAAD,CAA9C,CAFwB,CAIxB;;AACA,QAAMO,KAAK,GAAG,CACZ,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADY,CAAd;AAIA,QAAMC,WAAW,GAAGD,KAAK,CAACF,WAAD,CAAzB,CATwB,CAWxB;;AACA,QAAMI,WAAW,GAAGJ,WAAW,GAAGE,KAAK,CAACG,MAAN,GAAe,CAAjD;AACA,QAAMC,WAAW,GAAGN,WAAW,GAAG,CAAlC;;AACA,QAAMO,QAAQ,GAAG,MAAM;AACrB,QAAIH,WAAJ,EAAiB;AACfH,MAAAA,cAAc,CAACD,WAAW,GAAG,CAAf,CAAd;AAED;AACF,GALD;;AAMA,QAAMQ,QAAQ,GAAG,MAAM;AACrB,QAAIF,WAAJ,EAAiB;AACfL,MAAAA,cAAc,CAACD,WAAW,GAAG,CAAf,CAAd;AACD;AACF,GAJD,CApBwB,CA0BxB;;;AACA,SACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD,CAAa,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC;AAACS,IAAAA,QAAD;AAAWC,IAAAA;AAAX,GAAD,KAAuB,MAAC,WAAD;AAAa,IAAA,QAAQ,EAAED,QAAvB;AAAiC,IAAA,KAAK,EAAEC,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD1B,CADF,EAIE;AAAQ,IAAA,QAAQ,EAAE,CAACJ,WAAnB;AAAgC,IAAA,OAAO,EAAEE,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,EAKE;AAAQ,IAAA,QAAQ,EAAE,CAACJ,WAAnB;AAAgC,IAAA,OAAO,EAAEG,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,CADF;AASD,CApCD;;AAsCA,eAAeR,WAAf","sourcesContent":["import React, { useState } from 'react';\nimport ContactForm from './contact';\nimport FormProvider, { FormContext } from './FormProvider';\n\nconst FormWrapper = () => {\n  // state for each attribute\n  const [currentPage, setCurrentPage] = useState(0);\n\n  // all form components\n  const forms = [\n    <ContactForm />,\n  ];\n\n  const CurrentForm = forms[currentPage];\n\n  // handle paging between forms\n  const hasNextPage = currentPage < forms.length - 1;\n  const hasLastPage = currentPage > 0;\n  const nextPage = () => {\n    if (hasNextPage) {\n      setCurrentPage(currentPage + 1);\n      \n    }\n  }\n  const lastPage = () => {\n    if (hasLastPage) {\n      setCurrentPage(currentPage - 1)\n    }\n  }\n\n  // render 1 form at a time\n  return (\n    <FormProvider>\n      <FormContext.Consumer>\n        {({dispatch, state}) => <CurrentForm dispatch={dispatch} state={state} />}\n      </FormContext.Consumer>\n      <button disabled={!hasLastPage} onClick={lastPage}>last</button>\n      <button disabled={!hasNextPage} onClick={nextPage}>next</button>\n    </FormProvider>\n  );\n}\n\nexport default FormWrapper;\n"]},"metadata":{},"sourceType":"module"}